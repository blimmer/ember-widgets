eval("(function() {\n\nvar _ref;\n\nEmber.Widgets = Ember.Namespace.create();\n\nEmber.Widgets.VERSION = '0.1.0';\n\nif ((_ref = Ember.libraries) != null) {\n  _ref.register('Ember Widgets', Ember.Widgets.VERSION);\n}\n\n\n})();//@ sourceURL=build/src/ember_widgets.js")

eval("(function() {\n\nEmber.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();\n\nEmber.AddeparMixins.ResizeHandlerMixin = Ember.Mixin.create({\n  resizeEndDelay: 200,\n  resizing: false,\n  onResizeStart: Ember.K,\n  onResizeEnd: Ember.K,\n  onResize: Ember.K,\n  endResize: Ember.computed(function() {\n    return function(event) {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.set('resizing', false);\n      return typeof this.onResizeEnd === \"function\" ? this.onResizeEnd(event) : void 0;\n    };\n  }),\n  handleWindowResize: function(event) {\n    if (!this.get('resizing')) {\n      this.set('resizing', true);\n      if (typeof this.onResizeStart === \"function\") {\n        this.onResizeStart(event);\n      }\n    }\n    if (typeof this.onResize === \"function\") {\n      this.onResize(event);\n    }\n    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));\n  },\n  didInsertElement: function() {\n    this._super();\n    return this._setupResizeDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._removeResizeDocumentHandlers();\n    return this._super();\n  },\n  _setupResizeDocumentHandlers: function() {\n    if (this._resizeHandler) {\n      return;\n    }\n    this._resizeHandler = jQuery.proxy(this.get('handleWindowResize'), this);\n    return jQuery(window).on(\"resize.\" + this.elementId, this._resizeHandler);\n  },\n  _removeResizeDocumentHandlers: function() {\n    jQuery(window).off(\"resize.\" + this.elementId, this._resizeHandler);\n    return this._resizeHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=dependencies/ember-addepar-mixins/resize_handler.js")

eval("(function() {\n\nEmber.TEMPLATES[\"carousel\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.CollectionView\", {hash:{\n    'tagName': (\"ol\"),\n    'class': (\"carousel-indicators\"),\n    'contentBinding': (\"view.content\"),\n    'itemViewClass': (\"Ember.Widgets.CarouselIndicator\")\n  },hashTypes:{'tagName': \"STRING\",'class': \"STRING\",'contentBinding': \"STRING\",'itemViewClass': \"STRING\"},hashContexts:{'tagName': depth0,'class': depth0,'contentBinding': depth0,'itemViewClass': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n<div class=\\\"carousel-inner\\\">\\n  \");\n  stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\\n<a class=\\\"left carousel-control\\\"  href=\\\"#\\\" \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"prev\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">‹</a>\\n<a class=\\\"right carousel-control\\\" href=\\\"#\\\" \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"next\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">›</a>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"component_default_content\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1;\n\n\n  data.buffer.push(\"<p>\");\n  stack1 = helpers._triageMustache.call(depth0, \"content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</p>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"modal\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\":modal-dialog sizeClass\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\">\\n  <div class=\\\"modal-content\\\">\\n    <div class=\\\"modal-header\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_headerViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_contentViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_footerViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n    </div>\\n  </div>\\n</div>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"modal_footer\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  <button type=\\\"button\\\"\\n    \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'class': (\":btn :btn-primary :btn-confirm isValid::disabled\")\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendConfirm\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"confirmText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </button>\\n\");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-cancel\\\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendCancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"cancelText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </button>\\n\");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-close\\\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendClose\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"closeText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </button>\\n\");\n  return buffer;\n  }\n\n  stack1 = helpers['if'].call(depth0, \"confirmText\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n\");\n  stack1 = helpers['if'].call(depth0, \"cancelText\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n\");\n  stack1 = helpers['if'].call(depth0, \"closeText\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"modal_header\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<button type=\\\"button\\\" class=\\\"close\\\" \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendClose\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n  data.buffer.push(\">&times;</button>\\n<h4 class=\\\"modal-title\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"headerText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h4>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"popover\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  <h4 class=\\\"popover-title\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h4>\\n\");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"arrow\\\" \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'style': (\"arrowStyle\")\n  },hashTypes:{'style': \"STRING\"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\"></div>\\n\");\n  stack1 = helpers['if'].call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n<div class=\\\"popover-content\\\">\\n  \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view._contentViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n</div>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"popover_link_popover\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n  <h4 class=\\\"popover-title\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h4>\\n\");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"arrow\\\" \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n    'style': (\"view.arrowStyle\")\n  },hashTypes:{'style': \"STRING\"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));\n  data.buffer.push(\"></div>\\n\");\n  stack1 = helpers['if'].call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n<div class=\\\"popover-content\\\">\\n  \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view._contentViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n</div>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"view_parent_view_content\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1;\n\n\n  stack1 = helpers._triageMustache.call(depth0, \"view.parentView.content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});\n\n})();//@ sourceURL=build/src/templates.js")

eval("(function() {\n\n\nEmber.Widgets.StyleBindingsMixin = Ember.Mixin.create({\n  concatenatedProperties: ['styleBindings'],\n  attributeBindings: ['style'],\n  unitType: 'px',\n  createStyleString: function(styleName, property) {\n    var value;\n    value = this.get(property);\n    if (value === void 0) {\n      return;\n    }\n    if (Ember.typeOf(value) === 'number') {\n      value = value + this.get('unitType');\n    }\n    return \"\" + styleName + \":\" + value + \";\";\n  },\n  applyStyleBindings: function() {\n    var lookup, properties, styleBindings, styleComputed, styles,\n      _this = this;\n    styleBindings = this.styleBindings;\n    if (!styleBindings) {\n      return;\n    }\n    lookup = {};\n    styleBindings.forEach(function(binding) {\n      var property, style, _ref;\n      _ref = binding.split(':'), property = _ref[0], style = _ref[1];\n      return lookup[style || property] = property;\n    });\n    styles = _.keys(lookup);\n    properties = _.values(lookup);\n    styleComputed = Ember.computed(function() {\n      var styleString, styleTokens;\n      styleTokens = styles.map(function(style) {\n        return _this.createStyleString(style, lookup[style]);\n      });\n      styleString = styleTokens.join('');\n      if (styleString.length !== 0) {\n        return styleString;\n      }\n    });\n    styleComputed.property.apply(styleComputed, properties);\n    return Ember.defineProperty(this, 'style', styleComputed);\n  },\n  init: function() {\n    this.applyStyleBindings();\n    return this._super();\n  }\n});\n\nEmber.Widgets.BodyEventListener = Ember.Mixin.create({\n  bodyElementSelector: 'html',\n  bodyClick: Ember.K,\n  didInsertElement: function() {\n    this._super();\n    return Ember.run.next(this, this._setupDocumentHandlers);\n  },\n  willDestroyElement: function() {\n    this._super();\n    return this._removeDocumentHandlers();\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    if (this._clickHandler) {\n      return;\n    }\n    this._clickHandler = function(event) {\n      if ((_this.get('_state') || _this.get('state')) === 'inDOM' && Ember.isEmpty(_this.$().has($(event.target)))) {\n        return _this.bodyClick();\n      }\n    };\n    return $(this.get('bodyElementSelector')).on(\"click\", this._clickHandler);\n  },\n  _removeDocumentHandlers: function() {\n    $(this.get('bodyElementSelector')).off(\"click\", this._clickHandler);\n    return this._clickHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=build/src/mixins.js")

eval("(function() {\n\n\nEmber.Widgets.CarouselComponent = Ember.Component.extend({\n  layoutName: 'carousel',\n  classNames: ['carousel', 'slide'],\n  classNameBindings: Ember.A(['sliding']),\n  activeIndex: 0,\n  didInsertElement: function() {\n    if (!this.get('content')) {\n      return this.set('content', Ember.A(new Array(this.$('.item').length)));\n    }\n  },\n  actions: {\n    prev: function() {\n      var activeIndex, contentLength, nextIndex;\n      if (this.get('sliding')) {\n        return;\n      }\n      activeIndex = this.get('activeIndex');\n      contentLength = this.get('content.length');\n      nextIndex = activeIndex - 1;\n      nextIndex = nextIndex < 0 ? contentLength - 1 : nextIndex;\n      return this.slide('prev', nextIndex);\n    },\n    next: function() {\n      var activeIndex, contentLength, nextIndex;\n      if (this.get('sliding')) {\n        return;\n      }\n      activeIndex = this.get('activeIndex');\n      contentLength = this.get('content.length');\n      nextIndex = activeIndex + 1;\n      nextIndex = nextIndex >= contentLength ? 0 : nextIndex;\n      return this.slide('next', nextIndex);\n    }\n  },\n  to: function(pos) {\n    var direction;\n    if (this.get('sliding')) {\n      return;\n    }\n    if (!((0 <= pos && pos < this.get('content.length')))) {\n      return;\n    }\n    direction = pos > this.get('activeIndex') ? 'next' : 'prev';\n    return this.slide(direction, pos);\n  },\n  slide: function(type, nextIndex) {\n    var $active, $next, direction,\n      _this = this;\n    if (this.get('activeIndex') === nextIndex) {\n      return;\n    }\n    direction = type === 'next' ? 'left' : 'right';\n    $active = $(this.$('.item').get(this.get('activeIndex')));\n    $next = $(this.$('.item').get(nextIndex));\n    this.set('sliding', true);\n    $next.addClass(type);\n    $next[0].offsetWidth;\n    $active.addClass(direction);\n    $next.addClass(direction);\n    return $next.one($.support.transition.end, function() {\n      return Ember.run(_this, function() {\n        this.set('activeIndex', nextIndex);\n        $next.removeClass([type, direction].join(' ')).addClass('active');\n        $active.removeClass(['active', direction].join(' '));\n        return this.set('sliding', false);\n      });\n    });\n  }\n});\n\nEmber.Widgets.CarouselIndicator = Ember.View.extend({\n  classNameBindings: 'isActive:active',\n  isActive: Ember.computed(function() {\n    return this.get('contentIndex') === this.get('controller.activeIndex');\n  }).property('contentIndex', 'controller.activeIndex'),\n  click: function() {\n    return this.get('controller').to(this.get('contentIndex'));\n  }\n});\n\nEmber.Widgets.CarouselItem = Ember.View.extend({\n  classNames: 'item'\n});\n\nEmber.Handlebars.helper('carousel-component', Ember.Widgets.CarouselComponent);\n\nEmber.Handlebars.helper('carousel-item', Ember.Widgets.CarouselItem);\n\n\n})();//@ sourceURL=build/src/carousel.js")

eval("(function() {\n\n\nEmber.Widgets.ModalComponent = Ember.Component.extend(Ember.Widgets.StyleBindingsMixin, {\n  layoutName: 'modal',\n  classNames: ['modal'],\n  classNameBindings: ['isShowing:in', 'hasCloseButton::has-no-close-button', 'fade'],\n  modalPaneBackdrop: '<div class=\"modal-backdrop\"></div>',\n  bodyElementSelector: '.modal-backdrop',\n  enforceModality: false,\n  escToCancel: true,\n  backdrop: true,\n  isShowing: false,\n  hasCloseButton: true,\n  fade: true,\n  headerText: \"Modal Header\",\n  confirmText: \"Confirm\",\n  cancelText: \"Cancel\",\n  closeText: null,\n  content: \"\",\n  size: \"normal\",\n  isValid: true,\n  confirm: Ember.K,\n  cancel: Ember.K,\n  close: Ember.K,\n  headerViewClass: Ember.View.extend({\n    templateName: 'modal_header'\n  }),\n  contentViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"<p>{{content}}</p>\")\n  }),\n  footerViewClass: Ember.View.extend({\n    templateName: 'modal_footer'\n  }),\n  _headerViewClass: Ember.computed(function() {\n    var headerViewClass;\n    headerViewClass = this.get('headerViewClass');\n    if (typeof headerViewClass === 'string') {\n      return Ember.get(headerViewClass);\n    } else {\n      return headerViewClass;\n    }\n  }).property('headerViewClass'),\n  _contentViewClass: Ember.computed(function() {\n    var contentViewClass;\n    contentViewClass = this.get('contentViewClass');\n    if (typeof contentViewClass === 'string') {\n      return Ember.get(contentViewClass);\n    } else {\n      return contentViewClass;\n    }\n  }).property('contentViewClass'),\n  _footerViewClass: Ember.computed(function() {\n    var footerViewClass;\n    footerViewClass = this.get('footerViewClass');\n    if (typeof footerViewClass === 'string') {\n      return Ember.get(footerViewClass);\n    } else {\n      return footerViewClass;\n    }\n  }).property('footerViewClass'),\n  sizeClass: Ember.computed(function() {\n    switch (this.get('size')) {\n      case 'large':\n        return 'modal-lg';\n      case 'small':\n        return 'modal-sm';\n      default:\n        return '';\n    }\n  }).property('size'),\n  actions: {\n    sendCancel: function() {\n      var cancel;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      cancel = this.get('cancel');\n      if (typeof cancel === 'function') {\n        this.cancel(this);\n      } else {\n        this.sendAction('cancel');\n      }\n      return this.hide();\n    },\n    sendConfirm: function() {\n      var confirm;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      confirm = this.get('confirm');\n      if (typeof confirm === 'function') {\n        this.confirm(this);\n      } else {\n        this.sendAction('confirm');\n      }\n      return this.hide();\n    },\n    sendClose: function() {\n      var close;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      close = this.get('close');\n      if (typeof close === 'function') {\n        this.close(this);\n      } else {\n        this.sendAction('close');\n      }\n      return this.hide();\n    }\n  },\n  didInsertElement: function() {\n    this._super();\n    if (this.get('fade')) {\n      this.$()[0].offsetWidth;\n    }\n    if (this.get('backdrop')) {\n      this._appendBackdrop();\n    }\n    Ember.run.next(this, function() {\n      return this.set('isShowing', true);\n    });\n    $(document.body).addClass('modal-open');\n    return this._setupDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._super();\n    this._removeDocumentHandlers();\n    if (this._backdrop) {\n      return this._backdrop.remove();\n    }\n  },\n  keyHandler: Ember.computed(function() {\n    var fn;\n    fn = function(event) {\n      if (event.which === 27 && this.get('escToCancel')) {\n        return $(document).trigger('modal:hide');\n      }\n    };\n    return _.bind(fn, this);\n  }),\n  click: function(event) {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (!this.get('enforceModality')) {\n      return this.hide();\n    }\n  },\n  hide: function() {\n    var _this = this;\n    this.set('isShowing', false);\n    $(document.body).removeClass('modal-open');\n    if (this._backdrop) {\n      this._backdrop.removeClass('in');\n    }\n    return this.$().one($.support.transition.end, function() {\n      return Ember.run(_this, _this.destroy);\n    });\n  },\n  _appendBackdrop: function() {\n    var modalPaneBackdrop, parentLayer;\n    parentLayer = this.$().parent();\n    modalPaneBackdrop = this.get('modalPaneBackdrop');\n    if (this.get('fade')) {\n      this._backdrop = jQuery(modalPaneBackdrop).addClass('fade');\n    }\n    this._backdrop.appendTo(parentLayer);\n    return Ember.run.next(this, function() {\n      return this._backdrop.addClass('in');\n    });\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    this._super();\n    if (!this._hideHandler) {\n      this._hideHandler = function() {\n        return _this.hide();\n      };\n      $(document).on('modal:hide', this._hideHandler);\n    }\n    return $(document).on('keyup', this.get('keyHandler'));\n  },\n  _removeDocumentHandlers: function() {\n    this._super();\n    $(document).off('modal:hide', this._hideHandler);\n    this._hideHandler = null;\n    return $(document).off('keyup', this.get('keyHandler'));\n  }\n});\n\nEmber.Widgets.ModalComponent.reopenClass({\n  rootElement: '.ember-application',\n  poppedModal: null,\n  hideAll: function() {\n    return $(document).trigger('modal:hide');\n  },\n  popup: function(options) {\n    var modal, rootElement;\n    if (options == null) {\n      options = {};\n    }\n    this.hideAll();\n    rootElement = options.rootElement || this.rootElement;\n    modal = this.create(options);\n    modal.set('container', modal.get('targetObject.container'));\n    modal.appendTo(rootElement);\n    return modal;\n  }\n});\n\nEmber.Handlebars.helper('modal-component', Ember.Widgets.ModalComponent);\n\n\n})();//@ sourceURL=build/src/modal.js")

eval("(function() {\n\n\nEmber.Widgets.PopoverMixin = Ember.Mixin.create(Ember.Widgets.StyleBindingsMixin, Ember.Widgets.BodyEventListener, {\n  layoutName: 'popover',\n  classNames: ['popover'],\n  classNameBindings: ['isShowing:in', 'fade', 'placement'],\n  styleBindings: ['left', 'top', 'display', 'visibility'],\n  targetElement: null,\n  contentViewClass: null,\n  fade: true,\n  placement: 'top',\n  display: 'block',\n  visibility: 'hidden',\n  debounceTime: 100,\n  left: 0,\n  top: 0,\n  marginTop: 23,\n  marginLeft: 10,\n  isShowing: false,\n  inserted: false,\n  title: '',\n  content: '',\n  _resizeHandler: null,\n  _scrollHandler: null,\n  _contentViewClass: Ember.computed(function() {\n    if (this.get('contentViewClass')) {\n      return this.get('contentViewClass');\n    }\n    return Ember.View.extend({\n      content: Ember.computed.alias('parentView.content'),\n      templateName: 'view_parent_view_content'\n    });\n  }).property('contentViewClass'),\n  didInsertElement: function() {\n    this._super();\n    return Ember.run.next(this, function() {\n      this.snapToPosition();\n      this.set('visibility', 'visible');\n      return this.set('isShowing', true);\n    });\n  },\n  bodyClick: function() {\n    return this.hide();\n  },\n  hide: function() {\n    var _this = this;\n    if (this.get('isDestroyed')) {\n      return;\n    }\n    this.set('isShowing', false);\n    return this.$().one($.support.transition.end, function() {\n      return Ember.run(_this, _this.destroy);\n    });\n  },\n  /*\n    Calculate the offset of the given iframe relative to the top window.\n    - Walks up the iframe chain, checking the offset of each one till it reaches top\n    - Only works with friendly iframes.\n    - Takes into account scrolling, but comes up with a result relative to\n    top iframe, regardless of being visibile withing intervening frames.\n  \n    @param window win    the iframe we're interested in (e.g. window)\n    @param object pos   an object containing the offset so far:\n    { left: [x], top: [y] }\n    (optional - initializes with 0,0 if undefined)\n    @return pos object above\n  \n    via http://stackoverflow.com/a/9676655\n  */\n\n  computeFrameOffset: function(win, pos) {\n    var found, frame, frames, rect, _i, _len;\n    if (pos == null) {\n      pos = {\n        top: 0,\n        left: 0\n      };\n    }\n    frames = win.parent.document.getElementsByTagName(\"iframe\");\n    found = false;\n    for (_i = 0, _len = frames.length; _i < _len; _i++) {\n      frame = frames[_i];\n      if (frame.contentWindow === win) {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      rect = frame.getBoundingClientRect();\n      pos.left += rect.left;\n      pos.top += rect.top;\n      if (win !== top) {\n        this.computeFrameOffset(win.parent, pos);\n      }\n    }\n    return pos;\n  },\n  getOffset: function($target) {\n    var doc, pos, win;\n    pos = $target.offset();\n    doc = $target[0].ownerDocument;\n    win = doc.defaultView;\n    return this.computeFrameOffset(win, pos);\n  },\n  snapToPosition: function() {\n    var $target, actualHeight, actualWidth, pos;\n    $target = $(this.get('targetElement'));\n    if ((this.get('_state') || this.get('state')) !== 'inDOM' || Ember.isEmpty($target)) {\n      return;\n    }\n    actualWidth = this.$()[0].offsetWidth;\n    actualHeight = this.$()[0].offsetHeight;\n    pos = this.getOffset($target);\n    pos.width = $target[0].offsetWidth;\n    pos.height = $target[0].offsetHeight;\n    switch (this.get('placement')) {\n      case 'bottom':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\n        break;\n      case 'top':\n        this.set('top', pos.top - actualHeight);\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\n        break;\n      case 'top-right':\n        this.set('top', pos.top);\n        this.set('left', pos.left + pos.width);\n        break;\n      case 'top-left':\n        this.set('top', pos.top);\n        this.set('left', pos.left - actualWidth);\n        break;\n      case 'bottom-right':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left + pos.width - actualWidth);\n        break;\n      case 'bottom-left':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left);\n        break;\n      case 'left':\n        this.set('top', pos.top - this.get('marginTop'));\n        this.set('left', pos.left - actualWidth);\n        break;\n      case 'right':\n        this.set('top', pos.top - this.get('marginTop'));\n        this.set('left', pos.left + pos.width);\n        break;\n    }\n    this.correctIfOffscreen();\n    return this.positionArrow();\n  },\n  positionArrow: function() {\n    var $target, arrowSize, left, pos, top;\n    $target = $(this.get('targetElement'));\n    pos = this.getOffset($target);\n    pos.width = $target[0].offsetWidth;\n    pos.height = $target[0].offsetHeight;\n    arrowSize = 22;\n    switch (this.get('placement')) {\n      case 'left':\n      case 'right':\n        top = pos.top + pos.height / 2 - this.get('top') - arrowSize / 2;\n        return this.set('arrowStyle', \"margin-top:\" + top + \"px;\");\n      case 'top':\n      case 'bottom':\n        left = pos.left + pos.width / 2 - this.get('left') - arrowSize / 2;\n        return this.set('arrowStyle', \"margin-left:\" + left + \"px;\");\n    }\n  },\n  correctIfOffscreen: function() {\n    var actualHeight, actualWidth, bodyHeight, bodyWidth;\n    bodyWidth = $('body').width();\n    bodyHeight = $('body').height();\n    actualWidth = this.$()[0].offsetWidth;\n    actualHeight = this.$()[0].offsetHeight;\n    if (this.get('left') + actualWidth > bodyWidth) {\n      this.set('left', bodyWidth - actualWidth - this.get('marginLeft'));\n    }\n    if (this.get('left') < 0) {\n      this.set('left', this.get('marginLeft'));\n    }\n    if (this.get('top') + actualHeight > bodyHeight) {\n      this.set('top', bodyHeight - actualHeight - this.get('marginTop'));\n    }\n    if (this.get('top') < 0) {\n      return this.set('top', this.get('marginTop'));\n    }\n  },\n  debounceSnapToPosition: Ember.computed(function() {\n    var _this = this;\n    return function() {\n      return Ember.run.debounce(_this, _this.snapToPosition, _this.get('debounceTime'));\n    };\n  }),\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    this._super();\n    if (!this._hideHandler) {\n      this._hideHandler = function() {\n        return _this.hide();\n      };\n      $(document).on('popover:hide', this._hideHandler);\n    }\n    if (!this._resizeHandler) {\n      this._resizeHandler = this.get('debounceSnapToPosition');\n      $(document).on('resize', this._resizeHandler);\n    }\n    if (!this._scrollHandler) {\n      this._scrollHandler = this.get('debounceSnapToPosition');\n      return $(document).on('scroll', this._scrollHandler);\n    }\n  },\n  _removeDocumentHandlers: function() {\n    this._super();\n    $(document).off('popover:hide', this._hideHandler);\n    this._hideHandler = null;\n    $(document).off('resize', this._resizeHandler);\n    this._resizeHandler = null;\n    $(document).off('scroll', this._scrollHandler);\n    return this._scrollHandler = null;\n  }\n});\n\nEmber.Widgets.PopoverComponent = Ember.Component.extend(Ember.Widgets.PopoverMixin);\n\nEmber.Widgets.PopoverComponent.reopenClass({\n  rootElement: '.ember-application',\n  hideAll: function() {\n    return $(document).trigger('popover:hide');\n  },\n  popup: function(options) {\n    var popover, rootElement;\n    this.hideAll();\n    rootElement = options.rootElement || this.rootElement;\n    popover = this.create(options);\n    popover.set('container', popover.get('targetObject.container'));\n    popover.appendTo(rootElement);\n    return popover;\n  }\n});\n\nEmber.Handlebars.helper('popover-component', Ember.Widgets.PopoverComponent);\n\n\n})();//@ sourceURL=build/src/popover.js")

eval("(function() {\n\n\nEmber.Widgets.PopoverLinkComponent = Ember.Component.extend({\n  classNames: ['popover-link'],\n  classNameBindings: ['disabled'],\n  placement: 'top',\n  content: null,\n  title: null,\n  contentViewClass: null,\n  disabled: false,\n  popoverClassNames: [],\n  rootElement: '.ember-application',\n  _contentViewClass: Ember.computed(function() {\n    var contentViewClass;\n    contentViewClass = this.get('contentViewClass');\n    if (typeof contentViewClass === 'string') {\n      return Ember.get(contentViewClass);\n    }\n    return contentViewClass;\n  }).property('contentViewClass'),\n  click: function(event) {\n    var popover, popoverView;\n    if (this.get('disabled')) {\n      return;\n    }\n    popoverView = Ember.View.extend(Ember.Widgets.PopoverMixin, {\n      layoutName: 'popover_link_popover',\n      classNames: this.get('popoverClassNames'),\n      controller: this,\n      targetElement: this.get('element'),\n      container: this.get('container'),\n      placement: Ember.computed.alias('controller.placement'),\n      title: Ember.computed.alias('controller.title'),\n      contentViewClass: this.get('_contentViewClass')\n    });\n    popover = popoverView.create();\n    return popover.appendTo(this.get('rootElement'));\n  }\n});\n\nEmber.Handlebars.helper('popover-link-component', Ember.Widgets.PopoverLinkComponent);\n\n\n})();//@ sourceURL=build/src/popover_link.js")